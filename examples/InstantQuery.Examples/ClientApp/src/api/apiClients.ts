/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.7.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IOrdersClient {
    /**
     * @param searchTerm (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param statusIds (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @param sortBy (optional)
     * @param sortDir (optional)
     * @return Success
     */
    getOrders(searchTerm: string | null | undefined, startDate: Date | null | undefined, endDate: Date | null | undefined, statusIds: number[] | null | undefined, page: number | undefined, pageSize: number | undefined, sortBy: string | null | undefined, sortDir: string | null | undefined): Observable<OrderDetailsDtoListResultDto>;
    /**
     * @param searchTerm (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param statusIds (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @param sortBy (optional)
     * @param sortDir (optional)
     * @return Success
     */
    getOrdersVanillaLinq(searchTerm: string | null | undefined, startDate: Date | null | undefined, endDate: Date | null | undefined, statusIds: number[] | null | undefined, page: number | undefined, pageSize: number | undefined, sortBy: string | null | undefined, sortDir: string | null | undefined): Observable<OrderDetailsDtoListResultDto>;
    /**
     * @return Success
     */
    getOrderStatuses(): Observable<KeyValuePairDto[]>;
}

@Injectable()
export class OrdersClient implements IOrdersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param searchTerm (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param statusIds (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @param sortBy (optional)
     * @param sortDir (optional)
     * @return Success
     */
    getOrders(searchTerm: string | null | undefined, startDate: Date | null | undefined, endDate: Date | null | undefined, statusIds: number[] | null | undefined, page: number | undefined, pageSize: number | undefined, sortBy: string | null | undefined, sortDir: string | null | undefined) : Observable<OrderDetailsDtoListResultDto> {
        let url_ = this.baseUrl + "/api/orders?";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (startDate !== undefined && startDate !== null)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate !== undefined && endDate !== null)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (statusIds !== undefined && statusIds !== null)
            statusIds && statusIds.forEach(item => { url_ += "statusIds=" + encodeURIComponent("" + item) + "&"; });
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "sortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDir !== undefined && sortDir !== null)
            url_ += "sortDir=" + encodeURIComponent("" + sortDir) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrders(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrders(<any>response_);
                } catch (e) {
                    return <Observable<OrderDetailsDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrderDetailsDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrders(response: HttpResponseBase): Observable<OrderDetailsDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDetailsDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderDetailsDtoListResultDto>(<any>null);
    }

    /**
     * @param searchTerm (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @param statusIds (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @param sortBy (optional)
     * @param sortDir (optional)
     * @return Success
     */
    getOrdersVanillaLinq(searchTerm: string | null | undefined, startDate: Date | null | undefined, endDate: Date | null | undefined, statusIds: number[] | null | undefined, page: number | undefined, pageSize: number | undefined, sortBy: string | null | undefined, sortDir: string | null | undefined) : Observable<OrderDetailsDtoListResultDto> {
        let url_ = this.baseUrl + "/api/orders/vanilla-linq?";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "searchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (startDate !== undefined && startDate !== null)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate !== undefined && endDate !== null)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (statusIds !== undefined && statusIds !== null)
            statusIds && statusIds.forEach(item => { url_ += "statusIds=" + encodeURIComponent("" + item) + "&"; });
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "sortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDir !== undefined && sortDir !== null)
            url_ += "sortDir=" + encodeURIComponent("" + sortDir) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrdersVanillaLinq(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrdersVanillaLinq(<any>response_);
                } catch (e) {
                    return <Observable<OrderDetailsDtoListResultDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OrderDetailsDtoListResultDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrdersVanillaLinq(response: HttpResponseBase): Observable<OrderDetailsDtoListResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OrderDetailsDtoListResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OrderDetailsDtoListResultDto>(<any>null);
    }

    /**
     * @return Success
     */
    getOrderStatuses() : Observable<KeyValuePairDto[]> {
        let url_ = this.baseUrl + "/api/orders/statuses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOrderStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOrderStatuses(<any>response_);
                } catch (e) {
                    return <Observable<KeyValuePairDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<KeyValuePairDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetOrderStatuses(response: HttpResponseBase): Observable<KeyValuePairDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(KeyValuePairDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<KeyValuePairDto[]>();
    }
}

export class KeyValuePairDto implements IKeyValuePairDto {
    key?: number;
    value?: string | null;

    constructor(data?: IKeyValuePairDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): KeyValuePairDto {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValuePairDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export interface IKeyValuePairDto {
    key?: number;
    value?: string | null;
}

export class OrderDetailsDto implements IOrderDetailsDto {
    orderId?: number;
    item?: string | null;
    quantity?: number;
    lotNumber?: number | null;
    createdAt?: Date;
    userFullName?: string | null;
    userId?: number;
    statusName?: string | null;
    orderStatusId?: number;

    constructor(data?: IOrderDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orderId = _data["orderId"] !== undefined ? _data["orderId"] : <any>null;
            this.item = _data["item"] !== undefined ? _data["item"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.lotNumber = _data["lotNumber"] !== undefined ? _data["lotNumber"] : <any>null;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>null;
            this.userFullName = _data["userFullName"] !== undefined ? _data["userFullName"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.statusName = _data["statusName"] !== undefined ? _data["statusName"] : <any>null;
            this.orderStatusId = _data["orderStatusId"] !== undefined ? _data["orderStatusId"] : <any>null;
        }
    }

    static fromJS(data: any): OrderDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId !== undefined ? this.orderId : <any>null;
        data["item"] = this.item !== undefined ? this.item : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["lotNumber"] = this.lotNumber !== undefined ? this.lotNumber : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["userFullName"] = this.userFullName !== undefined ? this.userFullName : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["statusName"] = this.statusName !== undefined ? this.statusName : <any>null;
        data["orderStatusId"] = this.orderStatusId !== undefined ? this.orderStatusId : <any>null;
        return data;
    }
}

export interface IOrderDetailsDto {
    orderId?: number;
    item?: string | null;
    quantity?: number;
    lotNumber?: number | null;
    createdAt?: Date;
    userFullName?: string | null;
    userId?: number;
    statusName?: string | null;
    orderStatusId?: number;
}

export class OrderDetailsDtoListResultDto implements IOrderDetailsDtoListResultDto {
    data?: OrderDetailsDto[] | null;
    totalCount?: number;

    constructor(data?: IOrderDetailsDtoListResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.data) {
                this.data = [];
                for (let i = 0; i < data.data.length; i++) {
                    let item = data.data[i];
                    this.data[i] = item && !(<any>item).toJSON ? new OrderDetailsDto(item) : <OrderDetailsDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(OrderDetailsDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
        }
    }

    static fromJS(data: any): OrderDetailsDtoListResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDetailsDtoListResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        return data;
    }
}

export interface IOrderDetailsDtoListResultDto {
    data?: IOrderDetailsDto[] | null;
    totalCount?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.detail = _data["detail"] !== undefined ? _data["detail"] : <any>null;
            this.instance = _data["instance"] !== undefined ? _data["instance"] : <any>null;
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["detail"] = this.detail !== undefined ? this.detail : <any>null;
        data["instance"] = this.instance !== undefined ? this.instance : <any>null;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
